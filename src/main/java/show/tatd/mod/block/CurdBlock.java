package show.tatd.mod.block;

import net.minecraft.block.AbstractBlock;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.ShapeContext;
import net.minecraft.client.item.TooltipContext;
import net.minecraft.item.ItemStack;
import net.minecraft.particle.ParticleTypes;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.sound.SoundCategory;
import net.minecraft.sound.SoundEvents;
import net.minecraft.state.StateManager;
import net.minecraft.state.property.IntProperty;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.random.Random;
import net.minecraft.util.shape.VoxelShape;
import net.minecraft.world.BlockView;
import net.minecraft.world.World;
import org.jetbrains.annotations.Nullable;
import show.tatd.mod.init.ModBlock;

import java.util.List;

//Generated by Deepseek
public class CurdBlock extends Block {
    public static final IntProperty AGE = IntProperty.of("age", 0, 600); //
    protected static final VoxelShape SHAPE = Block.createCuboidShape(1.0D, 0.0D, 1.0D, 15.0D, 8.0D, 15.0D);

    public CurdBlock(AbstractBlock.Settings properties) {
        super(properties);
        this.setDefaultState(this.stateManager.getDefaultState().with(AGE, 0));
    }

    @Override
    protected void appendProperties(StateManager.Builder<Block, BlockState> builder) {
        builder.add(AGE);
    }

    @Override
    public void onBlockAdded(BlockState state, World level, net.minecraft.util.math.BlockPos pos, BlockState oldState, boolean isMoving) {
        if (!level.isClient) {
            int randomDelay = 600 + level.getRandom().nextInt(120);
            level.scheduleBlockTick(pos, this, randomDelay);
        }
    }

    @Override
    public void scheduledTick(BlockState state, ServerWorld level, BlockPos pos, Random random) {
        if (!level.isClient) {
            int age = state.get(AGE);
            int brightness = level.getLightLevel(pos);

            if (brightness <= 8) {
                if (age < 600) {
                    level.setBlockState(pos, state.with(AGE, age + 30), 2);
                    level.scheduleBlockTick(pos, this, 600);
                } else {
                    level.setBlockState(pos, ModBlock.CHEESE_WHEEL.getDefaultState(), 2);
                    level.playSound(null, pos, SoundEvents.BLOCK_HONEY_BLOCK_STEP, SoundCategory.BLOCKS, 0.5F, 1.0F);
                }
            } else {
                level.setBlockState(pos, state.with(AGE, 0), 2);
            }
        }
    }

    @Override
    public void randomDisplayTick(BlockState state, World level, BlockPos pos, Random random) {
        if (level.getLightLevel(pos) <= 8) {
            if (random.nextFloat() < 0.2F) {
                double x = (double) pos.getX() + 0.5D + (random.nextDouble() * 0.6D - 0.3D);
                double y = (double) pos.getY() + 0.8D;
                double z = (double) pos.getZ() + 0.5D + (random.nextDouble() * 0.6D - 0.3D);
                level.addParticle(ParticleTypes.AMBIENT_ENTITY_EFFECT, x, y, z, 1.0, 0.95, 0.8);
            }
            if (random.nextFloat() < 0.05F) {
                double x = (double) pos.getX() + 0.5D + (random.nextDouble() * 0.6D - 0.3D);
                double y = (double) pos.getY() + 0.8D;
                double z = (double) pos.getZ() + 0.5D + (random.nextDouble() * 0.6D - 0.3D);
                level.addParticle(ParticleTypes.AMBIENT_ENTITY_EFFECT, x, y, z, 1.0, 0.95, 0.8);
            }
        }
    }
    @Override
    public void appendTooltip(ItemStack stack, @Nullable BlockView level, List<Text> list, TooltipContext flag) {
        super.appendTooltip(stack, level, list, flag);
        list.add(Text.translatable(getTranslationKey() + ".tooltip").formatted(Formatting.GRAY));
    }
    @Override
    public VoxelShape getOutlineShape(BlockState state, BlockView level, BlockPos pos, ShapeContext context) {
        return SHAPE;
    }
}


